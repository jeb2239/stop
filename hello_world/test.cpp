// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("test.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 14);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 std::vector<Type*>FuncTy_2_args;
 FuncTy_2_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_4_args;
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_class_anon = mod->getTypeByName("class.anon");
 if (!StructTy_class_anon) {
 StructTy_class_anon = StructType::create(mod->getContext(), "class.anon");
 }
 std::vector<Type*>StructTy_class_anon_fields;
 StructTy_class_anon_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_anon->isOpaque()) {
 StructTy_class_anon->setBody(StructTy_class_anon_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_5 = PointerType::get(StructTy_class_anon, 0);
 
 PointerType* PointerTy_6 = PointerType::get(FuncTy_2, 0);
 
 PointerType* PointerTy_7 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_9_args;
 FuncTy_9_args.push_back(PointerTy_7);
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_9, 0);
 
 
 // Function Declarations
 
 Function* func__Z13some_functioni = mod->getFunction("_Z13some_functioni");
 if (!func__Z13some_functioni) {
 func__Z13some_functioni = Function::Create(
  /*Type=*/FuncTy_2,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z13some_functioni", mod); 
 func__Z13some_functioni->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z13some_functioni_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z13some_functioni_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z13some_functioni->setAttributes(func__Z13some_functioni_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_10 = ConstantDataArray::getString(mod->getContext(), "Answer is %d\x0A", true);
 ConstantInt* const_int32_11 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
 ConstantInt* const_int32_13 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int32_14 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("21"), 10));
 std::vector<Constant*> const_ptr_15_indices;
 const_ptr_15_indices.push_back(const_int32_13);
 const_ptr_15_indices.push_back(const_int32_13);
 Constant* const_ptr_15 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_15_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_10);
 
 // Function Definitions
 
 // Function: _Z13some_functioni (func__Z13some_functioni)
 {
  Function::arg_iterator args = func__Z13some_functioni->arg_begin();
  Value* int32_input = args++;
  int32_input->setName("input");
  
  BasicBlock* label_16 = BasicBlock::Create(mod->getContext(), "",func__Z13some_functioni,0);
  
  // Block  (label_16)
  AllocaInst* ptr_17 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_16);
  ptr_17->setAlignment(4);
  StoreInst* void_18 = new StoreInst(int32_input, ptr_17, false, label_16);
  void_18->setAlignment(4);
  LoadInst* int32_19 = new LoadInst(ptr_17, "", false, label_16);
  int32_19->setAlignment(4);
  BinaryOperator* int32_20 = BinaryOperator::Create(Instruction::Mul, int32_19, const_int32_12, "", label_16);
  ReturnInst::Create(mod->getContext(), int32_20, label_16);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_22 = BasicBlock::Create(mod->getContext(), "",func_main,0);
  
  // Block  (label_22)
  AllocaInst* ptr_23 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_22);
  ptr_23->setAlignment(4);
  AllocaInst* ptr_fun = new AllocaInst(StructTy_class_anon, "fun", label_22);
  ptr_fun->setAlignment(1);
  AllocaInst* ptr_answer = new AllocaInst(IntegerType::get(mod->getContext(), 32), "answer", label_22);
  ptr_answer->setAlignment(4);
  StoreInst* void_24 = new StoreInst(const_int32_13, ptr_23, false, label_22);
  CallInst* int32_25 = CallInst::Create(func__Z13some_functioni, const_int32_14, "", label_22);
  int32_25->setCallingConv(CallingConv::C);
  int32_25->setTailCall(false);
  AttributeSet int32_25_PAL;
  int32_25->setAttributes(int32_25_PAL);
  
  StoreInst* void_26 = new StoreInst(int32_25, ptr_answer, false, label_22);
  void_26->setAlignment(4);
  LoadInst* int32_27 = new LoadInst(ptr_answer, "", false, label_22);
  int32_27->setAlignment(4);
  std::vector<Value*> int32_28_params;
  int32_28_params.push_back(const_ptr_15);
  int32_28_params.push_back(int32_27);
  CallInst* int32_28 = CallInst::Create(func_printf, int32_28_params, "", label_22);
  int32_28->setCallingConv(CallingConv::C);
  int32_28->setTailCall(false);
  AttributeSet int32_28_PAL;
  int32_28->setAttributes(int32_28_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_13, label_22);
  
 }
 
 return mod;
}
